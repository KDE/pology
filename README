
From a mail of Chusslove Illich the 31th of Decembre 2007 on kde-i18n-doc@kde.org mailing list
=============================================================================================

So just something short for the moment. One has to export the python path to
use Pology scripts, and adding a path to scripts themselves doesn't hurt
either:

  export PYTHONPATH=$KDESVN/trunk/l10n-kde4/scripts:$PYTHONPATH
  export PATH=$KDESVN/trunk/l10n-kde4/scripts/pology:$PATH

At the moment, there are three scripts.

One script is the posieve.py, which applies "sieves" to PO files, which may
modify or only collect data from the files. Sieves are run in this way:

  $ posieve.py sieve-name [-sOPTION:VALUE ...] INPUT...

where -s specifies option-value pairs (some options don't take a value) for
the particular sieve, and input can be PO files or directory paths
containing PO files.

Some sieves that I think could be more generally useful:

* the aforementioned unfuzzy when only the context is changed:

  $ posieve.py unfuzzy-context-only [-sno-review] INPUT...

where -sno-review leaves out the comment about unreviewed context, in case
you don't want to do the review later on (not advised! :)

* unfuzzy the messages which changed only due to now-frequent closing of
tags in-place in msgid (such as <br> -> <br/>):

  $ posieve.py unfuzzy-inplace-only INPUT...

and it will, naturally, close these tags in msgstr's too.

* detailed statistics, with word and character counts, differences in these
counts to original, words per message, characters per word.

  $ posieve.py stats [-sdetail] [-sincomplete] INPUT...

where -sdetail shows more detailed statistics, and -sincomplete additionally
lists all PO files among those examined which are not fully translated (with
incompletness counts).

* a basic Perl/Python regex type search of PO files, where all matched
messages are simply output to terminal (but stating which file/line/entry
they are):

  $ posieve.py find-messages -saccel:\& -s<field>:'<regex>' INPUT...

where -saccel tells what is the accelerator character to strip before match,
and <field> is one of msgctxt, msgid, msgstr. (Obviously, this sieve has
tons of stuff it could do more... :)

* for those stuck in the stone age (like me :), using general purpose text
editor for translation instead of a modern tool such as KAider, two sieves
to ease the effort:

  $ posieve.py tag-untranslated INPUT...

which will add "untranslated" flag (as in #, untranslated) to untranslated
messages, and:

  $ posieve.py diff-previous INPUT...

which will embed a difference into previous-value fields of fuzzy messages
(#| msgid "..."), denoting added/removed text with {+...+} and {-...-}.

The second script, potagsplit.py, just wraps PO files such that the messages
are split at appropriate tags (<p>, <li>, <br>...):

  $ potagsplit.py --no-wrap <po_files_or_dirs>

which people often find easier on eyes while translating. Unfortunately,
messages get rewrapped to plain style on merge...

The third script, posummit.py, is the heavy artillery, secret weapon, etc.
and as all such contraptions easily ill-concieved and more likely to blow
into one's face than do something useful. If you execute (<ll> is the
language subdir):

  $ posummit.py scripts/messages.summit <ll> gather --create

after some churning it will create something odd in ll/internal :) Stay
tuned while I field test it on own skin...

